//TED 110504: Created
/*
  =c
  OLSR specific element, considers OLSR messages for forwarding, adds OLSR packet header to messages that are to be forwarded and decrements their TTL and increments their hop count. Adds OLSR message sequence numbers and OLSR packet headers to messages from nodes own message generators 

  =s
  OLSRForward(OLSRDuplicateSet element, OLSRNeighborInfobase element, ip_address)
  
  =io
  Two inputa, two outputs
  Input port 0: OLSR messages from the processing elements
  Input port 1: OLSR messages from the generator elements
  Output port 0: OLSR messages that are to be forwarded
  Output port 1: Discarded messages

  =processing
  PUSH

  =d
  The OLSRClassifier element gets OLSR messages on its input ports. Input port 0 gets packets from the elements processing incoming packets, input port 1 gets packets from the node's message generating elements. Packets from the processing elements must have their destination addres annotation set to the source address of the packet. If the message is to be forwarded, OLSR packet headers are added and the packet is output on port 0. If the message is generated by the node itself, the OLSR message sequence number is added as well. Messages that are not to be forwarded, are output on port 1.

  =a
  OLSRProcessHello, OLSRProcessTC, OLSRProcessMID, OLSRClassifier, OLSRHelloGenerator, OLSRTCGenerator
  
*/
#ifndef OLSR_FORWARD_HH
#define OLSR_FORWARD_HH

#include <click/element.hh>
#include <click/ipaddress.hh>
#include "olsr_neighbor_infobase.hh"
#include "olsr_duplicate_set.hh"
#include "olsr_interface_infobase.hh"
#include "olsr_local_if_infobase.hh"

CLICK_DECLS

class OLSRLinkInfoBase;
class OLSRInterfaceInfoBase;

class OLSRForward: public Element{
public:
  
  OLSRForward();
  ~OLSRForward();

  const char* class_name() const { return "OLSRForward"; }
  const char* processing() const { return PUSH; }
  OLSRForward*clone() const { return new OLSRForward(); }
  const char *port_count() const  { return "2/2"; }
  
  
  int configure(Vector<String> &conf, ErrorHandler *errh);
  int initialize(ErrorHandler *);
  void push(int port, Packet *packet);
  uint16_t get_msg_seq();

private:
  OLSRInterfaceInfoBase *_interfaceInfo;
  OLSRLocalIfInfoBase *_localIfInfoBase;
  OLSRDuplicateSet *_duplicateSet;
  OLSRNeighborInfoBase *_neighborInfo;
  IPAddress _myMainIP;
  uint16_t _msg_seq;
  struct timeval _dup_hold_time;
};

CLICK_ENDDECLS
#endif

 
  
